# This file is part of libertine linux's package curl. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/curl/master/COPYRIGHT. No part of libertine linux's package curl, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package curl. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/curl/master/COPYRIGHT.




case "$package" in
	
	build_go_1_4|go_1_4)
		
		variant=go_1_4

		depends build_bash
		build_needs bash

		depends build_musl_cross_make_build
		build_needs "$libertine_build"-cc "$libertine_build"-c++ "$libertine_build"-ar

		depends build_busybox

		# make.bash
		build_needs uname grep cat rm mkdir cp mv
		
		build_needs sed rm mkdir ln
		_libertine_compile_go_1_4()
		{
			local target="$1"
			local targetCFlagsFunction="$2"
			local targetCxxFlagsFunction="$3"
			local targetOperatingSystem="$4"
			local targetArch="$5"
			local targetArm="$6"
			local target386="$7"
			local sysroot="$8"
			local sysrootPrefix="$9"
			
			local goRootFinal="$sysroot"/libexec/go-1.4
			
			pushd "$(libertine_public_sourcePath)"/src

				# https://golang.org/doc/install/source#environment
	
				# make.bash --no-banner
				# Remove check for 'gold' linker; we do not have a 'ld' when cross-compiling
				# Fix use of CC
				# Fix use of CXX
				sed -i \
					-e 's/ld --version//g' \
					-e 's/\$CC/"$CC"/g' \
					-e 's/\$CC_FOR_TARGET/"$CC_FOR_TARGET"/g' \
					make.bash
	
				rm -rf ../.git
				
				ln -s "$target"-ar "$(libertine_public_buildNeedsPath)"/ar
				
				GO_CCFLAGS='' \
				GO_FLAGS='' \
				GOROOT_FINAL="$goRootFinal" \
				GOHOSTARCH="$libertine_buildGoogleGoArch" \
				GOARCH="$targetArch" \
				GOOS="$targetOperatingSystem" \
				GO_GCFLAGS="" \
				GO_LDFLAGS="" \
				CGO_ENABLED='0' \
				GO_EXTLINK_ENABLED='0' \
				CC="${libertine_build}-cc $(libertine_public_buildCCompilerFlags)" \
				CXX="${libertine_build}-c++ $(libertine_public_buildCxxCompilerFlags)" \
				CC_FOR_TARGET="${target}-cc $(${targetCFlagsFunction})" \
				CXX_FOR_TARGET="${target}-c++ $(${targetCxxFlagsFunction})" \
				GC='gfortran' \
				GO_DISTFLAGS='' \
				GOARM="$targetArm" \
				GO386="$target386" \
				./make.bash
				# --no-banner
			popd
			
			rm -rf "$(libertine_public_sourcePath)"/pkg/obj
			
			local destinationFolderPath="${sysrootPrefix}${goRootFinal}"
			mkdir -m 0755 -p "$destinationFolderPath"
			
			# Done this way so as to not copy hidden files
			set +f
			local file
			for file in "$(libertine_public_sourcePath)"/*
			do
				mv "$file" "$destinationFolderPath"
				set -f
			done
			set +f
			
			local ourGoRoot="$destinationFolderPath"/../..
			
			local ourGoBinFolderPath="$ourGoRoot"/bin
			mkdir -m 0755 -p "$ourGoBinFolderPath"
			
			pushd "$ourGoBinFolderPath"
				
				ln -s ../libexec/go-1.4/bin/go go-1.4
				ln -s ../libexec/go-1.4/bin/gofmt gofmt-1.4
			
				# This is only for builds, not production use, to keep the go-1.7 bootstrap code happy
				if [ "$(libertine_public_outputBuildSysrootPath)"/usr = "$sysroot" ]; then
					ln -s go-1.4 go
				fi
					
			popd
		
			# This is only for builds, not production use, to keep the go-1.7 bootstrap code happy
			if [ "$(libertine_public_outputBuildSysrootPath)"/usr = "$sysroot" ]; then
				ln -s libexec/go-1.4/src "$ourGoRoot"/src
				ln -s libexec/go-1.4/pkg "$ourGoRoot"/pkg
			fi
						
			
			
			
			# GOBIN, GOPATH
			# git required
			
			# go get golang.org/x/tools/cmd/godoc
			# go get golang.org/x/tools/cmd/cover  end up in pkg
			# go get golang.org/x/tools/cmd/vet
		}
		
		case "$package" in
			
			build_go_1_4)
		
				build_provides go-1.4 gofmt-1.4
				
				libertine_compile_build_go_1_4()
				{
					_libertine_compile_go_1_4 \
						"$libertine_build" \
						'libertine_public_buildCCompilerFlags' \
						'libertine_public_buildCxxCompilerFlags' \
						"$libertine_buildOperatingSystem" \
						"$libertine_buildGoogleGoArch" \
						"$libertine_buildGoogleGoArchArmVariant" \
						"$libertine_buildGoogleGoArch386Variant" \
						"$(libertine_public_outputBuildSysrootPath)"/usr \
						''
				}
				
			;;
			
			go_1_4)

				depends build_musl_cross_make_host
				build_needs "$libertine_host"-cc "$libertine_host"-c++ "$libertine_host"-ar "$libertine_host"-strip
				
				depends build_paxctl
				build_needs paxctl
				
				libertine_compile_go_1_4()
				{
					_libertine_compile_go_1_4 \
						"$libertine_host" \
						'libertine_public_hostCCompilerFlags' \
						'libertine_public_hostCxxCompilerFlags' \
						"$libertine_hostOperatingSystem" \
						"$libertine_hostGoogleGoArch" \
						"$libertine_hostGoogleGoArchArmVariant" \
						"$libertine_hostGoogleGoArch386Variant" \
						'/usr' \
						"$(libertine_public_outputHostSysrootPath)"
					
					printf '%s\n' "Now implement strip" 1>&2
					exit 99
					
					# eg  libertine_public_installAndStripBinaryIn bin go
				}
				
			;;
			
		esac
	;;
	
	build_go_1_7|go_1_7)
		
		variant=go_1_7
	
		# yes, really it does
		depends build_go_1_4
		build_needs go-1.4

		depends build_bash
		build_needs bash

		depends build_musl_cross_make_build
		build_needs "$libertine_build"-cc "$libertine_build"-c++

		depends build_busybox

		# make.bash
		build_needs uname grep cat rm mkdir cp mv
	
		build_needs sed rm mkdir
		_libertine_compile_go_1_7()
		{
			local target="$1"
			local targetCFlagsFunction="$2"
			local targetCxxFlagsFunction="$3"
			local targetOperatingSystem="$4"
			local targetArch="$5"
			local targetArm="$6"
			local target386="$7"
			local sysroot="$8"
			local sysrootPrefix="$9"
			
			local goRootFinal="$sysroot"/libexec/go-1.7
		
			pushd "$(libertine_public_sourcePath)"/src

				# https://golang.org/doc/install/source#environment
	
				# make.bash --no-banner
				# Remove check for 'gold' linker; we do not have a 'ld' when cross-compiling
				# Fix use of CC
				# Fix use of CXX
				sed -i \
					-e 's/ld --version//g' \
					-e 's/\$CC/"$CC"/g' \
					-e 's/\$CC_FOR_TARGET/"$CC_FOR_TARGET"/g' \
					make.bash
	
				rm -rf ../.git
			
				local build_go_1_4_installationFolderPath="$(libertine_public_outputBuildSysrootPath 'build_go_1_4')"/usr
	
				GOROOT_BOOTSTRAP="$build_go_1_4_installationFolderPath" \
				GOROOT_FINAL="$goRootFinal" \
				GOHOSTARCH="$libertine_buildGoogleGoArch" \
				GOARCH="$targetArch" \
				GOOS="$targetOperatingSystem" \
				GO_GCFLAGS="" \
				GO_LDFLAGS="" \
				CGO_ENABLED='0' \
				GO_EXTLINK_ENABLED='0' \
				CC="${libertine_build}-cc $(libertine_public_buildCCompilerFlags)" \
				CXX="${libertine_build}-c++ $(libertine_public_buildCxxCompilerFlags)" \
				CC_FOR_TARGET="${target}-cc $(${targetCFlagsFunction})" \
				CXX_FOR_TARGET="${target}-c++ $(${targetCxxFlagsFunction})" \
				GC='gfortran' \
				GO_DISTFLAGS='' \
				GOARM="$targetArm" \
				GO386="$target386" \
				./make.bash
				# --no-banner
			popd

			
			rm -rf "$(libertine_public_sourcePath)"/pkg/obj
			
			local destinationFolderPath="${sysrootPrefix}${goRootFinal}"
			mkdir -m 0755 -p "$destinationFolderPath"
			
			# Done this way so as to not copy hidden files
			set +f
			local file
			for file in "$(libertine_public_sourcePath)"/*
			do
				mv "$file" "$destinationFolderPath"
				set -f
			done
			set +f
			
			local ourGoBinFolderPath="$destinationFolderPath"/../../bin
			mkdir -m 0755 -p "$ourGoBinFolderPath"
			
			pushd "$ourGoBinFolderPath"
				
				ln -s ../libexec/go-1.7/bin/go go-1.7
				ln -s ../libexec/go-1.7/bin/gofmt gofmt-1.7
				
			popd
		}
		
		case "$package" in
			
			build_go_1_7)
	
				build_provides go-1.7 gofmt-1.7
				
				libertine_compile_build_go_1_7()
				{
					_libertine_compile_go_1_7 \
						"$libertine_build" \
						'libertine_public_buildCCompilerFlags' \
						'libertine_public_buildCxxCompilerFlags' \
						"$libertine_buildOperatingSystem" \
						"$libertine_buildGoogleGoArch" \
						"$libertine_buildGoogleGoArchArmVariant" \
						"$libertine_buildGoogleGoArch386Variant" \
						"$(libertine_public_outputBuildSysrootPath)"/usr \
						''
				}
				
			;;
			
			go_1_7)

				depends build_musl_cross_make_host
				build_needs "$libertine_host"-cc "$libertine_host"-c++ "$libertine_host"-strip
				
				depends build_paxctl
				build_needs paxctl
				
				libertine_compile_go_1_7()
				{
					_libertine_compile_go_1_7 \
						"$libertine_host" \
						'libertine_public_hostCCompilerFlags' \
						'libertine_public_hostCxxCompilerFlags' \
						"$libertine_hostOperatingSystem" \
						"$libertine_hostGoogleGoArch" \
						"$libertine_hostGoogleGoArchArmVariant" \
						"$libertine_hostGoogleGoArch386Variant" \
						'/usr' \
						"$(libertine_public_outputHostSysrootPath)"
					
					printf '%s\n' "Now implement strip" 1>&2
					exit 99
					
					# eg  libertine_public_installAndStripBinaryIn bin go
				}
				
			;;
			
		esac
	;;
	
	go)
		core_exitError 1 'go is not a supported kind of package; try go_1_7'
	;;
	
esac

